% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mtlr.R
\name{mtlr}
\alias{mtlr}
\title{Train a Mutli-Task Logistic Regression (MTLR) Model}
\usage{
mtlr(formula, data, nintervals = NULL, normalize = T, C1 = 1,
  train_biases = T, threshold = 1e-05, maxit = 5000, lower = -20,
  upper = 20)
}
\arguments{
\item{formula}{a formula object with the response to the left of the "~" operator. The response must be a survival object returned
by the \code{\link[survival]{Surv}} function.}

\item{data}{a data.frame containing the features for survival prediction. These must be variables corresponding to the formula object.}

\item{nintervals}{Number of time intervals to use for MTLR. Note the number of time points will be nintervals + 1. If left as NULL
a default of sqrt(N) is used where N is the number of observations in the supplied dataset.}

\item{normalize}{if TRUE, variables will be normalized (mean 0, standard deviation of 1). This is STRONGLY suggested. If normalization
does not occur it is much more likely that MTLR will fail to converge. Additionally, if FALSE consider adjusting "lower" and "upper"
used for L-BFGS-B optimization.}

\item{C1}{The L2 regularization parameter for MTLR. C1 can also be selected via \code{\link[MTLR]{mtlr_cv}}. See "Learning Patient-Specific Cancer Survival Distributions as a Sequence of Dependent
Regressors" by Yu et al. (2011) for details.}

\item{train_biases}{if TRUE, biases will be trained before feature weights (and again trained while training feature weights). This
has shown to speed up total training time.}

\item{threshold}{The threshold for training the weights. This threshold will be passed to \link[stats]{optim}.}

\item{maxit}{The maximum interations to run for MTLR. This parameter will be passed to \link[stats]{optim}.}

\item{lower}{The lower bound for L-BFGS-B optimization. This parameter will be passed to \link[stats]{optim}.}

\item{upper}{The upper bound for L-BFGS-B optimization. This parameter will be passed to \link[stats]{optim}.}
}
\value{
An mtlr object returns the following:
\itemize{
  \item weight_matrix: The matrix of feature weights determined by MTLR.
  \item x: The dataframe of features (response removed). Note observations with missing values will have been removed (this is the dataset on which
  MTLR was trained).
  \item y: The matrix of response values MTLR uses for training. Each column corresponds to an observation and rows as time points. A value of 1
  indicates a observation was either censored or had their event occur by that time.
  \item response: The response as a Surv object (specified by formula).
  \item time_points: The timepoints selected and used to train MTLR.
  \item C1: The regularization parameter used.
  \item Call: The original call to mtlr.
  \item Terms: The x-value terms used in mtlr. These are later used in \code{\link[MTLR]{predict.mtlr}}
  \item scale: The means and standard deviations of features when normalize = TRUE. These are used in \code{\link[MTLR]{predict.mtlr}}. Will be
  NULL if normalize = FALSE.
  \item xlevels: The levels of the features used. This is used again by \code{\link[MTLR]{predict.mtlr}}.
}
}
\description{
Trains a MTLR model for survival prediction. Right, left, and interval censored data is all supported.
}
\details{
This function allows one to train an MTLR model given a dataset containing survival data. mtlr uses the Limited-Memory
Broyden–Fletcher–Goldfarb–Shanno (L-BFGS-B) approximation method to train feature weights. This training is outsourced to the internal
\link[stats]{optim} function in R. Currently only a few parameters (namely threshold, maxit,lower, upper) of optim are supported, more will
likely become avaliable in the future.

Weights are initialized to 0 prior to training. Under default settings, the bias weights
will be trained before considering feature weights. As Yu et al. (2011) specified, the introduction of censored observations creates a non-convex
loss function. To address this, weights are first trained assuming all patietns event times are \emph{uncensored}. Once these starting weights have
been trained another round of training is performed using the true values of the event indicator (censored/uncensored). Future iterations of this
package will add more options to address this non-convexity.

Yu et al. (2011) actually suggested two regularization parameters, C1 to control the size of the feature weights and C2 to control the smoothness.
In Ping Jin's masters thesis (Using Survival Prediction Techniques to Learn Consumer-Specific Reservation Price Distributions) he showed that C2
is not required for smoothness and C1 will suffice (Appendix A.2) so we do not support the C2 parameter in this implemenetation.
}
\examples{
#Access the Surv function and the leukemia/lung dataset.
library(survival)
simple_mod <- mtlr(Surv(time,status)~., data = leukemia)
simple_mod

bigger_mod <- mtlr(Surv(time,status)~., data = lung)
bigger_mod

#Note that observations with missing data were removed:
nrow(lung)
nrow(bigger_mod$x)


}
\seealso{
\code{\link[MTLR]{predict.mtlr}} \code{\link[MTLR]{plot.mtlr}} \code{\link[MTLR]{mtlr_cv}} \code{\link[MTLR]{predict.mtlr}}
}
